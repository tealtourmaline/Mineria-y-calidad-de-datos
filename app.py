# -*- coding: utf-8 -*-
"""DESPLIEGUE.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/github/tealtourmaline/Mineria-y-calidad-de-datos/blob/main/DESPLIEGUE.ipynb

# Despliegue
# Dataset: Resultados Saber 11
***Valeria Espinal Alcaraz, Jerónimo Valencia Ospina, Natalia Arboleda Arboleda***
- Cargamos el modelo
- Cargamos los datos futuros
- Preparar los datos futuros
- Aplicamos el modelo para la predicción
"""

#Importamos librerías básicas
import pandas as pd # manipulacion dataframes
import numpy as np  # matrices y vectores
import matplotlib.pyplot as plt #gráfica

#pip install streamlit

import streamlit as st
#Cargamos el modelo
import pickle
filename = 'modelo-knn.pkl'
modelKnn,labelencoder,variables,min_max_scaler = pickle.load(open(filename, 'rb'))

import streamlit as st
import pandas as pd
import pickle

# Título de la app
st.title('Predicción del nivel de inglés en Saber 11')

st.write("Esta aplicación predice el nivel de inglés (A1, A2, B1, B+) que obtendría un estudiante en la prueba Saber 11, usando un modelo KNN entrenado.")

# Cargar el modelo KNN, el label encoder, las variables usadas y el escalador
modelo_path = 'modelo-knn.pkl'
modelKnn, labelencoder, variables, min_max_scaler = pickle.load(open(modelo_path, 'rb'))

# Inputs del usuario
st.subheader("Ingrese los datos del estudiante:")

cole_area = st.selectbox('Área de ubicación del colegio', ['URBANO', 'RURAL'])
cole_bilingue = st.selectbox('¿Colegio bilingüe?', ['S', 'N'])
cole_caracter = st.selectbox('Carácter del colegio', ['TÉCNICO', 'ACADÉMICO', 'TÉCNICO/ACADÉMICO'])
cole_jornada = st.selectbox('Jornada del colegio', ['MAÑANA', 'TARDE', 'NOCHE', 'COMPLETA'])
edu_madre = st.selectbox('Educación de la madre', [
    'Ninguno', 'Primaria completa', 'Secundaria (Bachillerato) completa',
    'Técnica o tecnológica completa', 'Educación profesional completa',
    'Educación profesional incompleta', 'Postgrado'
])
edu_padre = st.selectbox('Educación del padre', [
    'Ninguno', 'Primaria completa', 'Secundaria (Bachillerato) completa',
    'Técnica o tecnológica completa', 'Educación profesional completa',
    'Educación profesional incompleta', 'Postgrado'
])
estrato = st.selectbox('Estrato de vivienda', ['Estrato 1', 'Estrato 2', 'Estrato 3', 'Estrato 4', 'Estrato 5', 'Estrato 6'])
automovil = st.selectbox('¿Tiene automóvil?', ['Si', 'No'])
computador = st.selectbox('¿Tiene computador?', ['Si', 'No'])
internet = st.selectbox('¿Tiene internet?', ['Si', 'No'])
lavadora = st.selectbox('¿Tiene lavadora?', ['Si', 'No'])
punt_global = st.slider('Puntaje global obtenido', min_value=0, max_value=500, value=300)

# Diccionario con los datos
input_dict = {
    'COLE_AREA_UBICACION': [cole_area],
    'COLE_BILINGUE': [cole_bilingue],
    'COLE_CARACTER': [cole_caracter],
    'COLE_JORNADA': [cole_jornada],
    'FAMI_EDUCACIONMADRE': [edu_madre],
    'FAMI_EDUCACIONPADRE': [edu_padre],
    'FAMI_ESTRATOVIVIENDA': [estrato],
    'FAMI_TIENEAUTOMOVIL': [automovil],
    'FAMI_TIENECOMPUTADOR': [computador],
    'FAMI_TIENEINTERNET': [internet],
    'FAMI_TIENELAVADORA': [lavadora],
    'PUNT_GLOBAL': [punt_global]
}

# Crear DataFrame
input_df = pd.DataFrame(input_dict)

# Convertir columnas categóricas al tipo category para que coincidan con el modelo
for col in input_df.columns:
    if input_df[col].dtype == object:
        input_df[col] = input_df[col].astype('category')

# Escalar la variable numérica
input_df[['PUNT_GLOBAL']] = min_max_scaler.transform(input_df[['PUNT_GLOBAL']])

# Reordenar columnas y crear dummies para que coincidan con entrenamiento
input_df = pd.get_dummies(input_df)

# Asegurar que tenga todas las columnas del entrenamiento
for col in variables:
    if col not in input_df.columns:
        input_df[col] = 0
input_df = input_df[variables]  # Reordenar columnas

# Mostrar datos ingresados
st.subheader('Datos procesados:')
st.write(input_df)

# Botón para predecir
if st.button('Predecir nivel de inglés'):
    pred = modelKnn.predict(input_df)[0]
    nivel_ingles = labelencoder.inverse_transform([pred])[0]

    st.subheader('Predicción:')
    st.write(f"📘 El nivel de inglés estimado es: **{nivel_ingles}**")